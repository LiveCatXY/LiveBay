---
import ListItem from "../cards/list-item-card.astro";
import Levels from "../cards/levels-card.astro";
import Tags from "../cards/tags-card.astro";
import BaseHead from "../components/BaseHead.astro";
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
import { SITE_DESCRIPTION, SITE_TITLE, COLLECTION_MAP } from "../consts";
import {
  type Collection,
  type Post,
  type Level,
  type Tag,
  getAll,
} from "../utils/content";

interface Props {
  collection: Collection;
  tag?: Tag;
  level?: Level;
  fadeOld?: boolean;
}

const { collection, tag = "all", level = "all", fadeOld } = Astro.props;
const { posts, tags, levels } = await getAll(collection, tag, level);
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={tag == 'all' ? COLLECTION_MAP[collection] ?? SITE_TITLE : tag } description={SITE_DESCRIPTION} />
  </head>
  <body>
    <Header />
    <main class="flex flex-col">
      <Levels level={level} levels={levels} collection={collection} tag={tag} />
      <Tags tag={tag} tags={tags} collection={collection} level={level} />
      <div class="posts">
        <ul>
          {
            posts
              .toReversed()
              .toSorted((a, b) => b.data.top - a.data.top)
              .map((post, index) => (
                <ListItem
                  collection={collection}
                  post={post}
                  index={posts.length - index}
                  fadeOld={fadeOld}
                />
              ))
          }
        </ul>
      </div>
    </main>
    <Footer />

    <style>
      main {
        width: 100%;
      }
      .posts ul {
        display: flex;
        flex-wrap: wrap;
        list-style-type: none;
        margin: 0;
        padding: 0;
      }
    </style>
  </body>
</html>
